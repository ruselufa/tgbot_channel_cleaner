import logging
from datetime import datetime, timedelta
import asyncio
import sys
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, Defaults
import traceback

from src.models import Session, User, Comment
from src.db.init_db import init_db
from src.services.user_service import UserService
from src.services.comment_service import CommentService
from src.services.message_service import MessageService
from src.services.moderator_log_service import ModeratorLogService
from src.core.text_analyzer import TextAnalyzer
from src.core.message_tracker import MessageTracker
from src.core.message_broker import MessageBroker
from config.settings import (
    BOT_TOKEN, ADMIN_CHAT_ID, MESSAGES, CHANNEL_ID,
    MAX_WARNINGS, WORKER_COUNT
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    filename='bot.log'
)
logger = logging.getLogger(__name__)

class HighLoadBot:
    def __init__(self):
        self.text_analyzer = TextAnalyzer()
        self.message_broker = MessageBroker()
        self.message_tracker = MessageTracker(self.text_analyzer, self.message_broker)
        self.session = Session()
        self.user_service = UserService(self.session)
        self.comment_service = CommentService(self.session)
        self.message_service = MessageService()
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π."
        )

    async def handle_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = update.message or update.edited_message or update.channel_post
            if not message or not message.text:
                return
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if message.chat.id != int(CHANNEL_ID):
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞. ID —á–∞—Ç–∞: {message.chat.id}")
                return
                
            user_id = message.from_user.id if message.from_user else None
            if not user_id:
                logging.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
                
            text = message.text
            
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            is_negative = await self.text_analyzer.is_negative(text)
            toxicity_score = await self.text_analyzer.get_toxicity_score(text)
            emotion = await self.text_analyzer.get_emotion(text)
            
            logging.info(f"Text analysis results: negative={is_negative}, toxic={toxicity_score}, emotion={emotion}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if is_negative:
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                    user = await self.user_service.get_or_create_user(user_id, message.from_user.username)
                    warnings_count = await self.user_service.add_warning(user_id)
                    
                    if warnings_count >= MAX_WARNINGS:
                        # –ë–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        try:
                            await context.bot.delete_message(
                                chat_id=message.chat.id,
                                message_id=message.message_id
                            )
                            await context.bot.send_message(
                                chat_id=message.chat.id,
                                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª."
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    else:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        try:
                            await context.bot.send_message(
                                chat_id=user_id,
                                text=f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n–£ –≤–∞—Å {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ {MAX_WARNINGS}."
                            )
                        except Exception as e:
                            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")
                    
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    if ADMIN_CHAT_ID:
                        try:
                            await context.bot.send_message(
                                chat_id=ADMIN_CHAT_ID,
                                text=f"üö® –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n\n{text}\n\n"
                                    f"–ê–Ω–∞–ª–∏–∑:\n"
                                    f"- –ù–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {is_negative}\n"
                                    f"- –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {toxicity_score:.2f}\n"
                                    f"- –≠–º–æ—Ü–∏—è: {emotion}\n"
                                    f"- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}/{MAX_WARNINGS}"
                            )
                        except Exception as e:
                            logging.error(f"Error sending message to admin chat: {e}")
                except Exception as e:
                    logging.error(f"Error processing warning: {e}")
                    traceback.print_exc()
                        
        except Exception as e:
            logging.error(f"Error processing negative comment: {e}")
            traceback.print_exc()
        finally:
            self.session.commit()

    async def handle_edited_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message = update.edited_message
        if not message.reply_to_message:
            return
            
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.user_service.get_or_create_user(
                message.from_user.id,
                message.from_user.username
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            can_edit, restriction_reason = self.user_service.check_edit_restrictions(user)
            if not can_edit:
                await message.reply_text(restriction_reason)
                await message.delete()
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            check_result = await self.message_tracker.check_edit(
                message.message_id,
                message.text
            )
            
            if not check_result:
                return
                
            if check_result['is_suspicious']:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                    self.user_service.update_suspicious_edits_count(user)
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
                    comment = self.session.query(Comment).filter_by(
                        post_id=message.reply_to_message.message_id,
                        user_id=user.id
                    ).first()
                    
                    if comment:
                        edit = self.comment_service.record_edit(
                            comment=comment,
                            new_text=message.text,
                            sentiment_change=check_result['edit_info']['sentiment_change'],
                            is_suspicious=True,
                            analysis_data=check_result['edit_info']['analysis']
                        )
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await context.bot.delete_message(
                        chat_id=message.chat_id,
                        message_id=message.message_id
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    await context.bot.send_message(
                        chat_id=message.from_user.id,
                        text=MESSAGES['suspicious_edit'].format(
                            self.text_analyzer.get_toxicity_reason(
                                check_result['edit_info']['analysis']
                            )
                        )
                    )
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ü–∏–¥–µ–Ω—Ç
                    log_service = ModeratorLogService(self.session)
                    log_service.log_action(
                        moderator_id=None,
                        action='suspicious_edit',
                        target_user_id=user.telegram_id,
                        comment_id=comment.id if comment else None,
                        details=str(check_result['edit_info']),
                        analysis_data=check_result['edit_info']['analysis']
                    )
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤
                    await self._notify_moderators_about_edit(message, check_result['edit_info'])
                    
                except Exception as e:
                    logger.error(f"Error handling suspicious edit: {e}")
                    
        except Exception as e:
            logger.error(f"Error in handle_edited_message: {e}")

    async def _notify_moderators_about_edit(self, message, edit_info):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏"""
        notification = (
            f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{message.from_user.username} (ID: {message.from_user.id})\n"
            f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{edit_info['old_text']}\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{edit_info['new_text']}\n\n"
            f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {edit_info['sentiment_change']:.2f}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {self.text_analyzer.get_toxicity_reason(edit_info['analysis'])}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
        )
        
        await self.message_broker.push_message({
            'chat_id': ADMIN_CHAT_ID,
            'text': notification,
            'priority': True
        })
        
    async def handle_moderation_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, comment_id = query.data.split('_')
        comment_id = int(comment_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = self.session.query(Comment).filter_by(id=comment_id).first()
            if not comment:
                await query.edit_message_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.session.query(User).filter_by(id=comment.user_id).first()
            
            if action == "approve":
                # –û–¥–æ–±—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.comment_service.approve_comment(comment, query.from_user.id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_service = ModeratorLogService(self.session)
                log_service.log_action(
                    moderator_id=query.from_user.id,
                    action='approve_comment',
                    target_user_id=user.telegram_id,
                    comment_id=comment.id
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=MESSAGES['comment_approved']
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–¢–µ–∫—Å—Ç: {comment.text}"
                )
                
            elif action == "reject":
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                await query.edit_message_text(
                    f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–¢–µ–∫—Å—Ç: {comment.text}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", callback_data=f"reason_insult_{comment_id}")],
                        [InlineKeyboardButton("–°–ø–∞–º", callback_data=f"reason_spam_{comment_id}")],
                        [InlineKeyboardButton("–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", callback_data=f"reason_profanity_{comment_id}")],
                        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data=f"reason_other_{comment_id}")]
                    ])
                )
                
            elif action.startswith("reason_"):
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                reason_type = action.split('_')[1]
                reasons = {
                    "insult": "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ",
                    "spam": "—Å–ø–∞–º",
                    "profanity": "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞",
                    "other": "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
                }
                reason = reasons.get(reason_type, "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
                
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.comment_service.reject_comment(comment, query.from_user.id, reason)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                warnings_count, should_ban = self.user_service.add_warning(user, reason)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_service.log_action(
                    moderator_id=query.from_user.id,
                    action='reject_comment',
                    target_user_id=user.telegram_id,
                    comment_id=comment.id,
                    details=reason
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=MESSAGES['comment_rejected'].format(reason)
                )
                
                if should_ban:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=MESSAGES['user_banned'].format(24)
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=MESSAGES['user_warning'].format(
                            reason, warnings_count, MAX_WARNINGS
                        )
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(
                    f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}/{MAX_WARNINGS}"
                )
            
        except Exception as e:
            logger.error(f"Error handling moderation action: {e}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            log_service = ModeratorLogService(self.session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            stats_24h = log_service.get_moderation_stats(
                from_date=datetime.utcnow() - timedelta(days=1)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_total = log_service.get_moderation_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            edit_stats = await self.message_tracker.get_edit_statistics()
            
            stats_message = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats_24h['approved_comments']}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats_24h['rejected_comments']}\n"
                f"‚ö†Ô∏è –í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats_24h['warnings_issued']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_24h['users_banned']}\n"
                f"üìù –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats_24h['suspicious_edits']}\n\n"
                "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –í—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ: {stats_total['approved_comments']}\n"
                f"‚ùå –í—Å–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats_total['rejected_comments']}\n"
                f"‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats_total['warnings_issued']}\n"
                f"üö´ –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats_total['users_banned']}\n"
                f"‚õîÔ∏è –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {stats_total['users_blacklisted']}\n\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n"
                f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π: {edit_stats['total_tracked_messages']}\n"
                f"‚úèÔ∏è –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {edit_stats['total_edits']}\n"
                f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {edit_stats['suspicious_edits']}"
            )
            
            await update.message.reply_text(stats_message)
            
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def cleanup_task(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            await self.message_tracker.cleanup_old_records()
            logger.info("Cleanup task completed successfully")
        except Exception as e:
            logger.error(f"Error in cleanup task: {e}")
            
    # –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è job_queue
    async def cleanup_task_wrapper(self, context):
        await self.cleanup_task()

    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'session'):
            self.session.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö event loops
        nest_asyncio.apply()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        defaults = Defaults(parse_mode=ParseMode.HTML)
        application = Application.builder().token(BOT_TOKEN).defaults(defaults).build()
        bot = HighLoadBot()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", bot.start))
        application.add_handler(CommandHandler("stats", bot.show_stats))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏ –æ–±—ã—á–Ω—ã—Ö —á–∞—Ç–æ–≤
        application.add_handler(MessageHandler(
            (filters.TEXT | filters.CAPTION | filters.UpdateType.CHANNEL_POST) & ~filters.COMMAND, 
            bot.handle_comment
        ))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(
            filters.UpdateType.EDITED_MESSAGE | filters.UpdateType.EDITED_CHANNEL_POST,
            bot.handle_edited_message
        ))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ callback-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(bot.handle_moderation_action))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—á–∏—Å—Ç–∫–∏
        job_queue = application.job_queue
        job_queue.run_repeating(bot.cleanup_task_wrapper, interval=timedelta(hours=24))
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        application.run_polling(allowed_updates=Update.ALL_TYPES)
        
    except Exception as e:
        logging.error(f"Error starting bot: {e}")
        raise

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(0)
    except Exception as e:
        logging.error(f"Critical error: {e}")
        sys.exit(1) 