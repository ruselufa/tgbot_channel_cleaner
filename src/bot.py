import logging
from datetime import datetime, timedelta
import asyncio
import sys
import nest_asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from telegram.constants import ParseMode
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, Defaults
import traceback

from src.models import Session, User, Comment
from src.db.init_db import init_db
from src.services.user_service import UserService
from src.services.comment_service import CommentService
from src.services.message_service import MessageService
from src.services.moderator_log_service import ModeratorLogService
from src.core.text_analyzer import TextAnalyzer
from src.core.message_tracker import MessageTracker
from src.core.message_broker import MessageBroker
from config.settings import (
    BOT_TOKEN, ADMIN_CHAT_ID, MESSAGES, CHANNEL_ID,
    MAX_WARNINGS, WORKER_COUNT, DISCUSSION_GROUP_ID
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)
logger = logging.getLogger(__name__)

class HighLoadBot:
    def __init__(self):
        self.text_analyzer = TextAnalyzer()
        self.message_broker = MessageBroker()
        self.message_tracker = MessageTracker(self.text_analyzer, self.message_broker)
        self.session = Session()
        self.user_service = UserService(self.session)
        self.comment_service = CommentService(self.session)
        self.message_service = MessageService()
        print(f"\n–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å:\n–ö–∞–Ω–∞–ª ID: {CHANNEL_ID}\n–ê–¥–º–∏–Ω —á–∞—Ç ID: {ADMIN_CHAT_ID}\n")
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = ReplyKeyboardMarkup([
            [KeyboardButton("/stats"), KeyboardButton("/unban_user")],
            [KeyboardButton("/get_chat_id")]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä. –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ –∏ –ø–æ–º–æ–≥–∞—Ç—å —Å –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π.",
            reply_markup=keyboard
        )

    async def get_chat_id(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞/–∫–∞–Ω–∞–ª–∞"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        chat_title = update.effective_chat.title if update.effective_chat.title else "–õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
        
        await update.message.reply_text(
            f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {chat_title}\n"
            f"–¢–∏–ø: {chat_type}\n"
            f"ID: {chat_id}\n\n"
            f"üí° –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –≤–∞–º –Ω—É–∂–Ω–æ:\n\n"
            f"1. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n"
            f"   –∏ —É–∫–∞–∑–∞—Ç—å ID –∫–∞–Ω–∞–ª–∞ –≤ —Ñ–∞–π–ª–µ .env:\n"
            f"   CHANNEL_ID=–≤–∞—à_id_–∫–∞–Ω–∞–ª–∞\n\n"
            f"2. –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤,\n"
            f"   –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ –±–æ—Ç–∞ –∏ —É–∫–∞–∑–∞—Ç—å ID –≥—Ä—É–ø–ø—ã –≤ —Ñ–∞–π–ª–µ .env:\n"
            f"   ADMIN_CHAT_ID=id_–≥—Ä—É–ø–ø—ã_–∞–¥–º–∏–Ω–æ–≤\n\n"
            f"‚ùóÔ∏è –í –≥—Ä—É–ø–ø—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            f"‚Ä¢ –ù–µ–≥–∞—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"‚Ä¢ –ë–∞–Ω–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            f"‚Ä¢ –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö"
        )

    async def handle_comment(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
        try:
            print("\n=== –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ ===")
            print(f"Update ID: {update.update_id}")
            print(f"Update type: {type(update).__name__}")
            print(f"Has message: {update.message is not None}")
            print(f"Has channel_post: {update.channel_post is not None}")
            print(f"Has edited_channel_post: {update.edited_channel_post is not None}")
            print(f"Raw update: {update.to_dict()}")
            print("===============================")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if update.channel_post:
                message = update.channel_post
                update_type = "channel_post"
            elif update.message:
                message = update.message
                update_type = "message"
            else:
                print("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
                
            print(f"–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_type}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞
            if not message.text and not (message.caption and isinstance(message.caption, str)):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞. –¢–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {type(message).__name__}")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤ caption –¥–ª—è –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–π)
            text = message.text if message.text else message.caption
            
            # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
            message_details = (
                f"\n=== –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ===\n"
                f"–¢–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update_type}\n"
                f"–¢–µ–∫—Å—Ç: {text}\n"
                f"–¢–∏–ø: {type(message).__name__}\n"
                f"Chat ID: {message.chat.id}\n"
                f"Message ID: {message.message_id}\n"
                f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username if message.from_user else 'Unknown'}\n"
                f"–¢–∏–ø —á–∞—Ç–∞: {message.chat.type}\n"
                f"CHANNEL_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {CHANNEL_ID}\n"
                f"DISCUSSION_GROUP_ID –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞: {DISCUSSION_GROUP_ID}\n"
                f"======================"
            )
            print(message_details)
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            chat_id = str(message.chat.id)
            channel_id = str(CHANNEL_ID)
            discussion_id = str(DISCUSSION_GROUP_ID)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
            is_from_channel = chat_id == channel_id
            is_from_discussion = chat_id == discussion_id
            
            if not (is_from_channel or is_from_discussion):
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π.")
                print(f"Chat ID: {chat_id}")
                print(f"CHANNEL_ID: {channel_id}")
                print(f"DISCUSSION_GROUP_ID: {discussion_id}")
                return
                
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–æ—Å—Ç—É –∏–∑ –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞
            if is_from_discussion and hasattr(message, 'reply_to_message'):
                reply_msg = message.reply_to_message
                if not (hasattr(reply_msg, 'forward_origin') and 
                       hasattr(reply_msg.forward_origin, 'chat') and 
                       str(reply_msg.forward_origin.chat.id) == channel_id):
                    print("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º –∫ –ø–æ—Å—Ç—É –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                    return
            
            user_id = message.from_user.id if message.from_user else None
            if not user_id:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
                
            # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞
            is_negative = await self.text_analyzer.is_negative(text)
            toxicity_score = await self.text_analyzer.get_toxicity_score(text)
            emotion = await self.text_analyzer.get_emotion(text)
            
            print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ ===")
            print(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {is_negative}")
            print(f"–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {toxicity_score:.2f}")
            print(f"–≠–º–æ—Ü–∏—è: {emotion}")
            print("=========================")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            await self.message_tracker.track_message(
                message_id=message.message_id,
                text=text,
                sentiment_score=toxicity_score,
                user_id=user_id,
                username=message.from_user.username
            )
            
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π
            if is_negative:
                user = await self.user_service.get_or_create_user(user_id, message.from_user.username)
                warnings_count = await self.user_service.add_warning(user_id)
                
                # –£–¥–∞–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await context.bot.delete_message(
                        chat_id=message.chat.id,
                        message_id=message.message_id
                    )
                    print(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message.message_id})")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π
                warning_text = (
                    f"‚ö†Ô∏è @{message.from_user.username}, –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.\n"
                    f"–£ –≤–∞—Å {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ {MAX_WARNINGS}.\n\n"
                    f"–ê–Ω–∞–ª–∏–∑ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:\n"
                    f"- –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {toxicity_score:.2f}\n"
                    f"- –≠–º–æ—Ü–∏—è: {emotion}"
                )
                
                try:
                    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —Ç—É–¥–∞ –∂–µ
                    if is_from_discussion:
                        await context.bot.send_message(
                            chat_id=DISCUSSION_GROUP_ID,
                            text=warning_text,
                            reply_to_message_id=message.message_id if message.reply_to_message else None
                        )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É: {e}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                if ADMIN_CHAT_ID:
                    try:
                        await context.bot.send_message(
                            chat_id=ADMIN_CHAT_ID,
                            text=f"üö® –ù–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç @{message.from_user.username}:\n\n"
                                 f"–¢–µ–∫—Å—Ç: {text}\n\n"
                                 f"–ê–Ω–∞–ª–∏–∑:\n"
                                 f"- –ù–µ–≥–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {is_negative}\n"
                                 f"- –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {toxicity_score:.2f}\n"
                                 f"- –≠–º–æ—Ü–∏—è: {emotion}\n"
                                 f"- –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}/{MAX_WARNINGS}\n"
                                 f"–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω–æ."
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º: {e}")
                    
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")
            traceback.print_exc()
        finally:
            self.session.commit()

    async def unban_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–†–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not context.args:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞.\n"
                "–ü—Ä–∏–º–µ—Ä: /unban_user @username"
            )
            return
            
        username = context.args[0].replace("@", "")
        try:
            user = self.session.query(User).filter_by(username=username).first()
            if not user:
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
                
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ —Å–Ω–∏–º–∞–µ–º –±–∞–Ω
            user.warnings_count = 0
            user.banned_until = None
            self.session.commit()
            
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Ä–∞–∑–±–∞–Ω–µ
            try:
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text="üéâ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–±–ª—é–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –æ–±—â–µ–Ω–∏—è."
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞–∑–±–∞–Ω–µ: {e}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    async def handle_edited_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = update.edited_message or update.edited_channel_post
            if not message or not message.text:
                print("–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞")
                return
            
            print(f"\n=== –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è ===")
            print(f"Chat ID: {message.chat.id}")
            print(f"Message ID: {message.message_id}")
            print(f"–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: {message.text}")
            print(f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username if message.from_user else 'Unknown'}")
            print("===========================")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            if str(message.chat.id) != str(CHANNEL_ID):
                print(f"–ò–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
            edit_result = await self.message_tracker.check_edit(
                message_id=message.message_id,
                new_text=message.text
            )
            
            if not edit_result:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
                
            print(f"\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è ===")
            print(f"–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ: {edit_result['is_suspicious']}")
            print(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: {edit_result['edit_info']['sentiment_change']:.2f}")
            print("===================================")
            
            if edit_result['is_suspicious']:
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
                is_negative = await self.text_analyzer.is_negative(message.text)
                toxicity_score = await self.text_analyzer.get_toxicity_score(message.text)
                emotion = await self.text_analyzer.get_emotion(message.text)
                
                print(f"\n=== –ê–Ω–∞–ª–∏–∑ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ ===")
                print(f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {is_negative}")
                print(f"–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: {toxicity_score:.2f}")
                print(f"–≠–º–æ—Ü–∏—è: {emotion}")
                print("===============================")
                
                if is_negative:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id = message.from_user.id if message.from_user else None
                        if not user_id:
                            return
                        
                        user = await self.user_service.get_or_create_user(user_id, message.from_user.username)
                        warnings_count = await self.user_service.add_warning(user_id)
                        
                        # –£–¥–∞–ª—è–µ–º –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        try:
                            await context.bot.delete_message(
                                chat_id=message.chat.id,
                                message_id=message.message_id
                            )
                            print(f"–£–¥–∞–ª–µ–Ω–æ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {message.message_id})")
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=f"‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ! –í–∞—à–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n"
                                 f"–£ –≤–∞—Å {warnings_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏–∑ {MAX_WARNINGS}."
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {e}")
                        traceback.print_exc()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ handle_edited_message: {e}")
            traceback.print_exc()
        finally:
            self.session.commit()

    async def handle_moderation_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–∫–Ω–æ–ø–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è)"""
        query = update.callback_query
        await query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
        action, comment_id = query.data.split('_')
        comment_id = int(comment_id)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            comment = self.session.query(Comment).filter_by(id=comment_id).first()
            if not comment:
                await query.edit_message_text("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
                
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = self.session.query(User).filter_by(id=comment.user_id).first()
            
            if action == "approve":
                # –û–¥–æ–±—Ä—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.comment_service.approve_comment(comment, query.from_user.id)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_service = ModeratorLogService(self.session)
                log_service.log_action(
                    moderator_id=query.from_user.id,
                    action='approve_comment',
                    target_user_id=user.telegram_id,
                    comment_id=comment.id
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=MESSAGES['comment_approved']
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(
                    f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–¥–æ–±—Ä–µ–Ω\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–¢–µ–∫—Å—Ç: {comment.text}"
                )
                
            elif action == "reject":
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                await query.edit_message_text(
                    f"–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–¢–µ–∫—Å—Ç: {comment.text}",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("–û—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ", callback_data=f"reason_insult_{comment_id}")],
                        [InlineKeyboardButton("–°–ø–∞–º", callback_data=f"reason_spam_{comment_id}")],
                        [InlineKeyboardButton("–ù–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞", callback_data=f"reason_profanity_{comment_id}")],
                        [InlineKeyboardButton("–î—Ä—É–≥–æ–µ", callback_data=f"reason_other_{comment_id}")]
                    ])
                )
                
            elif action.startswith("reason_"):
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                reason_type = action.split('_')[1]
                reasons = {
                    "insult": "–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ",
                    "spam": "—Å–ø–∞–º",
                    "profanity": "–Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞",
                    "other": "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ—Å—Ç–≤–∞"
                }
                reason = reasons.get(reason_type, "–Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
                
                # –û—Ç–∫–ª–æ–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                self.comment_service.reject_comment(comment, query.from_user.id, reason)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                warnings_count, should_ban = self.user_service.add_warning(user, reason)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
                log_service.log_action(
                    moderator_id=query.from_user.id,
                    action='reject_comment',
                    target_user_id=user.telegram_id,
                    comment_id=comment.id,
                    details=reason
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await context.bot.send_message(
                    chat_id=user.telegram_id,
                    text=MESSAGES['comment_rejected'].format(reason)
                )
                
                if should_ban:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=MESSAGES['user_banned'].format(24)
                    )
                else:
                    await context.bot.send_message(
                        chat_id=user.telegram_id,
                        text=MESSAGES['user_warning'].format(
                            reason, warnings_count, MAX_WARNINGS
                        )
                    )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
                await query.edit_message_text(
                    f"‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username}\n"
                    f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n"
                    f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings_count}/{MAX_WARNINGS}"
                )
            
        except Exception as e:
            logger.error(f"Error handling moderation action: {e}")
            await query.edit_message_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

    async def show_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            log_service = ModeratorLogService(self.session)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            stats_24h = log_service.get_moderation_stats(
                from_date=datetime.utcnow() - timedelta(days=1)
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_total = log_service.get_moderation_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑–º–µ–Ω–µ–Ω–∏–π
            edit_stats = await self.message_tracker.get_edit_statistics()
            
            stats_message = (
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞:\n"
                f"‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats_24h['approved_comments']}\n"
                f"‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {stats_24h['rejected_comments']}\n"
                f"‚ö†Ô∏è –í—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats_24h['warnings_issued']}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats_24h['users_banned']}\n"
                f"üìù –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {stats_24h['suspicious_edits']}\n\n"
                "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚úÖ –í—Å–µ–≥–æ –æ–¥–æ–±—Ä–µ–Ω–æ: {stats_total['approved_comments']}\n"
                f"‚ùå –í—Å–µ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ: {stats_total['rejected_comments']}\n"
                f"‚ö†Ô∏è –í—Å–µ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats_total['warnings_issued']}\n"
                f"üö´ –í—Å–µ–≥–æ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫: {stats_total['users_banned']}\n"
                f"‚õîÔ∏è –í —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ: {stats_total['users_blacklisted']}\n\n"
                "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n"
                f"üìù –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π: {edit_stats['total_tracked_messages']}\n"
                f"‚úèÔ∏è –í—Å–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {edit_stats['total_edits']}\n"
                f"‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: {edit_stats['suspicious_edits']}"
            )
            
            await update.message.reply_text(stats_message)
            
        except Exception as e:
            logger.error(f"Error showing stats: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

    async def cleanup_task(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π"""
        try:
            await self.message_tracker.cleanup_old_records()
            logger.info("Cleanup task completed successfully")
        except Exception as e:
            logger.error(f"Error in cleanup task: {e}")
            
    # –§—É–Ω–∫—Ü–∏—è-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è job_queue
    async def cleanup_task_wrapper(self, context):
        await self.cleanup_task()

    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
        if hasattr(self, 'session'):
            self.session.close()

async def setup_bot(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook
        webhook_info = await application.bot.get_webhook_info()
        if webhook_info.url:
            print(f"\nüîÑ –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π webhook: {webhook_info.url}")
            await application.bot.delete_webhook()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
            chat = await application.bot.get_chat(CHANNEL_ID)
            bot_member = await chat.get_member(application.bot.id)
            
            print(f"\nüì¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:")
            print(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}")
            print(f"‚Ä¢ –¢–∏–ø: {chat.type}")
            print(f"‚Ä¢ ID: {chat.id}")
            
            print(f"\nü§ñ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:")
            print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {bot_member.status}")
            print(f"‚Ä¢ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {bot_member.can_read_messages}")
            print(f"‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {bot_member.can_delete_messages}")
            print(f"‚Ä¢ –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {bot_member.can_send_messages}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π
            if DISCUSSION_GROUP_ID:
                try:
                    discussion_chat = await application.bot.get_chat(DISCUSSION_GROUP_ID)
                    discussion_member = await discussion_chat.get_member(application.bot.id)
                    
                    print(f"\nüí¨ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π:")
                    print(f"‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: {discussion_chat.title}")
                    print(f"‚Ä¢ –¢–∏–ø: {discussion_chat.type}")
                    print(f"‚Ä¢ ID: {discussion_chat.id}")
                    
                    print(f"\nü§ñ –ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π:")
                    print(f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {discussion_member.status}")
                    print(f"‚Ä¢ –ú–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {discussion_member.can_read_messages}")
                    print(f"‚Ä¢ –ú–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {discussion_member.can_delete_messages}")
                    print(f"‚Ä¢ –ú–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {discussion_member.can_send_messages}")
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π: {e}")
                    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
                    print("1. –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∫ –∫–∞–Ω–∞–ª—É")
                    print("2. –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä")
                    print("3. ID –≥—Ä—É–ø–ø—ã —É–∫–∞–∑–∞–Ω –≤–µ—Ä–Ω–æ")
            else:
                print("\n‚ö†Ô∏è ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏–π –Ω–µ —É–∫–∞–∑–∞–Ω")
                print("–î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
                print("1. –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏–π –¥–ª—è –∫–∞–Ω–∞–ª–∞")
                print("2. –î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ –≥—Ä—É–ø–ø—É")
                print("3. –£–∫–∞–∑–∞—Ç—å DISCUSSION_GROUP_ID –≤ —Ñ–∞–π–ª–µ .env")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞: {e}")
            
        print("\n‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:")
        print(f"‚Ä¢ CHANNEL_ID: {CHANNEL_ID}")
        print(f"‚Ä¢ DISCUSSION_GROUP_ID: {DISCUSSION_GROUP_ID}")
        print(f"‚Ä¢ ADMIN_CHAT_ID: {ADMIN_CHAT_ID}")
        print(f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: channel_post, edited_channel_post, message, edited_message, callback_query")
        print(f"‚Ä¢ –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: True")
        print(f"‚Ä¢ –¢–∞–π–º–∞—É—Ç: 30 —Å–µ–∫—É–Ω–¥")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –±–æ—Ç–∞: {e}")
        raise

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    nest_asyncio.apply()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    init_db()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    bot = HighLoadBot()
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", bot.start))
    application.add_handler(CommandHandler("stats", bot.show_stats))
    application.add_handler(CommandHandler("unban_user", bot.unban_user))
    application.add_handler(CommandHandler("get_chat_id", bot.get_chat_id))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.UpdateType.CHANNEL_POST,
        bot.handle_comment,
        block=False
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–Ω–∞–ª–∞
    application.add_handler(MessageHandler(
        filters.ChatType.CHANNEL & filters.UpdateType.EDITED_CHANNEL_POST,
        bot.handle_edited_message,
        block=False
    ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏–π
    if DISCUSSION_GROUP_ID:
        application.add_handler(MessageHandler(
            filters.Chat(chat_id=int(DISCUSSION_GROUP_ID)) & filters.TEXT,
            bot.handle_comment,
            block=False
        ))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
        application.add_handler(MessageHandler(
            filters.Chat(chat_id=int(DISCUSSION_GROUP_ID)) & filters.UpdateType.EDITED_MESSAGE,
            bot.handle_edited_message,
            block=False
        ))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–µ –∏–∑ –∫–∞–Ω–∞–ª–∞)
    application.add_handler(MessageHandler(
        filters.TEXT & ~filters.COMMAND & ~filters.ChatType.CHANNEL,
        bot.handle_comment,
        block=False
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫
    application.add_handler(CallbackQueryHandler(bot.handle_moderation_action))
    
    logging.info(
        f"–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã:\n"
        f"‚Ä¢ CHANNEL_ID: {CHANNEL_ID} (—Ç–∏–ø: {type(CHANNEL_ID)})\n"
        f"‚Ä¢ DISCUSSION_GROUP_ID: {DISCUSSION_GROUP_ID}\n"
        f"‚Ä¢ ADMIN_CHAT_ID: {ADMIN_CHAT_ID}\n"
        f"‚Ä¢ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: channel_post, edited_channel_post, message, edited_message, callback_query"
    )
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–æ—Ç–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    asyncio.get_event_loop().run_until_complete(setup_bot(application))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    application.run_polling(
        allowed_updates=[
            "message",
            "edited_message",
            "channel_post",
            "edited_channel_post",
            "callback_query"
        ],
        drop_pending_updates=True,
        timeout=30,
        read_timeout=30,
        write_timeout=30
    )

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        sys.exit(0)
    except Exception as e:
        logging.error(f"Critical error: {e}")
        sys.exit(1) 